/*
* generated by Xtext
*/
package org.maschinenstuermer.clojure.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jdt.internal.ui.JavaPlugin;
import org.eclipse.jdt.internal.ui.JavaPluginImages;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.DecorationOverlayIcon;
import org.eclipse.jface.viewers.IDecoration;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.maschinenstuermer.clojure.ClojureUtil;
import org.maschinenstuermer.clojure.clojure.Namespace;
import org.maschinenstuermer.clojure.clojure.SymbolDef;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
@SuppressWarnings("restriction")
public class ClojureLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public ClojureLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
	
	Image image(final Namespace namespace) {
		return JavaPlugin.getImageDescriptorRegistry().get(JavaPluginImages.DESC_OBJS_PACKAGE);
	}
	
	ImageDescriptor image(final SymbolDef symbolDef) {
		if (ClojureUtil.isFn(symbolDef)) {
			final Image image = JavaPlugin.getImageDescriptorRegistry().get(JavaPluginImages.DESC_MISC_PUBLIC);
			return new DecorationOverlayIcon(image, JavaPluginImages.DESC_OVR_STATIC, IDecoration.BOTTOM_RIGHT);
		}
		else {
			final Image image = JavaPlugin.getImageDescriptorRegistry().get(JavaPluginImages.DESC_FIELD_PUBLIC);
			return new DecorationOverlayIcon(image, JavaPluginImages.DESC_OVR_STATIC, IDecoration.BOTTOM_RIGHT);
		}
	}
}
