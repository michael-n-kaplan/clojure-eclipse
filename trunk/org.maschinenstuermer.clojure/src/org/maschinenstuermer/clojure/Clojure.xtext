grammar org.maschinenstuermer.clojure.Clojure 
hidden (WSS,SL_COMMENT)

generate clojure "http://www.maschinenstuermer.org/clojure/Clojure"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

File:
	namespaces+=Ns*|
	exprs+=Form*;

SimpleForm:
	SimpleLiteral|
	SpecialForm|
	ReaderMacro|
	Seq;
		
Form:
	SimpleForm|
	Literal;
		
QuotedForm:
	QuotedLiteral|
	ReaderMacro|
	QuotedDot|
	QuotedSeq;

QuotedSeq:
	QuotedList|
	QuotedVector|
	QuotedMap|
	QuotedSet;
	
QuotedList:
	{ List }
	'(' elements+=QuotedForm* ')';

QuotedVector:
	{ Vector }
	'[' elements+=QuotedForm* ']';
		
QuotedMap:
	{ Map }
	'{' (keys+=QuotedForm elements+=QuotedForm)* '}';
	
QuotedSet:
	{ Set }
	'#{' elements+=QuotedForm* '}';

QuotedLiteral:
	SimpleLiteral|
	symbol=(QualifiedName|'&');
	
SimpleLiteral:
	value='nil'|
	value=STRING|
	value=NUMBER|
	value=KEYWORD|
	value=CHAR|
	value=Boolean;
	
Literal:
	symbol=[types::JvmType|QualifiedName];

Boolean:
	"true"|"false";
	
ReaderMacro:
	Deref|
	ReaderLambda|
	ReaderMetaMacro|
	ReaderQuote|
	ReaderVar|
	Regex|
	SyntaxQuote|
	Unquote|
	UnquoteSplicing;
	
ReaderMetaMacro:
	ReaderMeta form=Form;
	
ReaderLambda:
	{ ReaderLambda }
	'#(' exprs+=Form* ')';
	
SpecialForm:
	Call|
	Do|
	Dot|
	If|
	Import|
	Let|
	Loop|
	Meta|
	MonitorEnter|
	MonitorExit|
	New|
	Quote|
	Recur|
	SymbolDef|
	Throw|
	Try|
	Var;

SymbolDef:
	Def|
	Defn|
	DefnPriv|
	Defmacro|
	Fn;
	 
// Special forms

Def:
	'(' 'def' meta=ReaderMeta? name=Name init=Form? ')';
	
Defn:
	'(' 'defn' meta=ReaderMeta? name=Name doc=STRING? attributes=Map? body=Body ')';

DefnPriv:
	'(' 'defn-' meta=ReaderMeta? name=Name doc=STRING? attributes=Map? body=Body ')';

Defmacro:
	'(' 'defmacro' meta=ReaderMeta? name=Name doc=STRING? attributes=Map? body=Body ')';
	 
Deref:
	'@' form=Form;
	
Do:
	{ Do }
	'(' 'do' exprs+=Form* ')';

QuotedDot:
	'(' '.' args+=QuotedForm+ ')';
	
Dot:
	'(' '.' args+=Form+ ')';
	
Fn:
	{ Fn }
	('(' ('fn'|'fn*') meta=ReaderMeta? name=Name? body=Body ')');
	
If:
	'(' 'if' test=Form then=Form else=Form? ')';
	
Import:
	'(' 'import' packages+=PackageImport+ ')';

PackageImport:
	'\'' '(' package=QualifiedName classes+=Name* ')';
	
LexicalScope:
	Lambda|
	Let|
	Loop;
	
Let:
	{ Let }
	'(' 'let' '['(bindings+=Binding inits+=Form)*']' exprs+=Form* ')';
	
Loop:
	{ Loop }
	'(' 'loop' '['(bindings+=Binding inits+=Form)*']' exprs+=Form* ')';
	
Ns:
	('(' 'ns' meta=ReaderMeta? name=QualifiedName ')'|
	 '(' 'in-ns' '\'' name=QualifiedName ')')
	elements += Form*;
	
Meta:
	'(' 'meta' data=Form ')';
	
ReaderMeta:
	'^' data=Form;

MonitorEnter:
	'(' 'monitor-enter' form=Form ')';
		
MonitorExit:
	'(' 'monitor-exit' form=Form ')';
		
New:
	'(' 'new' class=[types::JvmType|JavaQualifiedName] args+=Form*')';
	
Recur:
	{ Recur }
	'(' 'recur' exprs+=Form* ')';
	
ReaderQuote:
	'\'' form=QuotedForm;
	
Quote:
	'(' 'quote' form=QuotedForm ')';
		
Regex:
	'#' regex=STRING;
	
SyntaxQuote:
	'`' form=QuotedForm;
	
Throw:
	'(' 'throw' expr=Form ')';
	
Try:
	{ Try }
	'(' 'try' exprs+=Form* (catchClauses+=CatchClause)* finallyClause=FinallyClause? ')';
	
CatchClause:
	'(' 'catch' className=Name name=Name exprs+=Form* ')';
	
FinallyClause:
	{ FinallyClause }
	'(' 'finally' exprs+=Form* ')';
	
Unquote:
	'~' form=Form;
	
UnquoteSplicing:
	'~@' form=Form;
	
ReaderVar:
	('#\'' symbol=[SymbolDef|Name]);
	
Var:
	('(' 'var' symbol=[SymbolDef|Name] ')');

// Bindings
	
Binding:
	SimpleBinding |
	VectorBinding |
	MapBinding;

NameBinding:
	meta=ReaderMeta? (varArg?='&'|keyWord=KEYWORD)? name=Name;
			
SimpleBinding:
	bindings+=NameBinding;
	
VectorBinding:
	{ VectorBinding }
	'[' bindings+=Binding* ']';
	
MapBinding:
	{ MapBinding }
	'{' bindings+=KeyBinding* '}';

KeyBinding:
	binding+=Binding key += KEYWORD; 

// fn 
	
Body:
	lambdas+=Lambda | 
	('(' lambdas+=Lambda ')')+;
	
Lambda:
	{ Lambda }
	'[' bindings+=Binding* ']' exprs+=Form*;

// Sequences
	
Seq:
	List|
	Vector|
	Map|
	Set;
	
Call:
	'(' fn=[types::JvmType|JavaQualifiedName] isNew?='.'? args+=Form* ')';
	
List:
	{ List }
	'(' (elements+=SimpleForm elements+=Form*)? ')';

Vector:
	{ Vector }
	'[' elements+=Form* ']';
		
Map:
	{ Map }
	'{' (keys+=Form elements+=Form)* '}';
	
Set:
	{ Set }
	'#{' elements+=Form* '}';

// data type rules
	
JavaQualifiedName:
	SYMBOL;
	
QualifiedName:
	Name;
	
Name:
	SYMBOL|
	'catch'|
	'def'|'defn'|'defn-'|'defmacro'|'do'|
	'fn'|'fn*'|'finally'|
	'if'|'in-ns'|'import'|
	'let'|'loop'|
	'meta'|'monitor-enter'|'monitor-exit'|
	'ns'|'new'|
	'quote'|
	'throw'|'try'|
	'recur'|
	'var';
	
// Terminals
	
terminal KEYWORD:
	':' SYMBOL;
	
terminal SYMBOL: 
	'&'? SYMBOL_START (SYMBOL_START|DIGIT|'.'|'&')* |
	'..';
		
terminal SYMBOL_START:
	'a'..'z'|'A'..'Z'|'_'|'+'|'-'|'*'|'!'|'?'|'='|'#'|'<'|'>'|'/'|'%';

terminal NUMBER: 
	DIGIT+(('.' DIGIT*)|('r' DIGIT+))?'M'?;
	
terminal DIGIT:
	('0'..'9');
	
terminal STRING	: 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
	
terminal CHAR:
	'\\' !(' '|'\t'|'\r'|'\n')+;
	
terminal WSS: 
	(' '|'\t'|'\r'|'\n')+;
	
terminal SL_COMMENT: 
	';' !('\n'|'\r')* ('\r'? '\n')?;
		