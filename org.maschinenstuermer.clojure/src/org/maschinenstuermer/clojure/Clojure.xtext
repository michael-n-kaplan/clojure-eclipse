grammar org.maschinenstuermer.clojure.Clojure 
hidden (WSS,SL_COMMENT)

generate clojure "http://www.maschinenstuermer.org/clojure/Clojure"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

File:
	forms+=Form*;
	
Form:
	Literal| 
	SpecialForm| 
	Seq;
		
QuotedForm:
	QuotedLiteral|
	QuotedSeq;

QuotedSeq:
	QuotedList|
	QuotedVector|
	QuotedMap|
	QuotedSet;
	
QuotedList:
	{ List }
	'(' elements+=QuotedForm* ')';

QuotedVector:
	{ Vector }
	'[' elements+=QuotedForm* ']';
		
QuotedMap:
	{ Map }
	'{' (keys+=QuotedForm elements+=QuotedForm)* '}';
	
QuotedSet:
	{ Set }
	'#{' elements+=QuotedForm* '}';

QuotedLiteral:
	string=STRING|
	int=INT| 
	keyword=KEYWORD|
	symbol=(Name|'&');
	
Literal:
	nil?='nil'|
	bool=Boolean|
	string=STRING|
	int=INT| 
	keyword=KEYWORD|
	symbol=[types::JvmType|QualifiedName];

Boolean:
	value=("true"|"false");
	
SpecialForm:
	Deref|
	Do|
	Dot|
	If|
	Let|
	Loop|
	Meta|
	MonitorEnter|
	MonitorExit|
	New|
	Ns|
	Quote|
	Recur|
	Regex|
	SymbolDef|
	SyntaxQuote|
	Throw|
	Try|
	Unquote|
	UnquoteSplicing|
	Var;

SymbolDef:
	Def|
	Defn|
	Defmacro|
	Fn;
	 
// Special forms

Def:
	'(' 'def' meta=ReaderMeta? name=Name init=Form? ')';
	
Defn:
	'(' 'defn' name=Name doc=STRING? meta=Map? body=Body ')';

Defmacro:
	'(' 'defmacro' name=Name doc=STRING? meta=Map? body=Body ')';
	 
Deref:
	'(' 'deref' form=Form ')'|
	'@' form=Form;
	
Do:
	{ Do }
	'(' 'do' exprs+=Form* ')';
	
Dot:
	'(' '.' class=Form call=MethodCall ')';

MethodCall:
	method=Name args+=Form* |
	'(' method=Name args+=Form* ')';
	
Fn:
	{ Fn }
	('(' ('fn'|'fn*') meta=ReaderMeta? name=Name? body=Body ')');
	
If:
	'(' 'if' test=Form then=Form else=Form? ')';
	
LexicalScope:
	Lambda|
	Let|
	Loop;
	
Let:
	{ Let }
	'(' 'let' '['(bindings+=Binding inits+=Form)*']' exprs+=Form* ')';
	
Loop:
	{ Loop }
	'(' 'loop' '['(bindings+=Binding inits+=Form)*']' exprs+=Form* ')';
	
Ns:
	'(' 'ns' meta=Meta? name=QualifiedName ')';
	
Meta:
	'(' 'meta' form=Form ')'|
	ReaderMeta;
	
ReaderMeta:
	'^' form=Form;

MonitorEnter:
	'(' 'monitor-enter' form=Form ')';
		
MonitorExit:
	'(' 'monitor-exit' form=Form ')';
		
New:
	'(' 'new' class=QualifiedName args+=Form*')';
	
Recur:
	{ Recur }
	'(' 'recur' exprs+=Form* ')';
	
Quote:
	'(' 'quote' form=QuotedForm ')'|
	'\'' form=QuotedForm;
		
Regex:
	'#' regex=STRING;
	
SyntaxQuote:
	'`' form=QuotedForm;
	
Throw:
	'(' 'throw' expr=Form ')';
	
Try:
	{ Try }
	'(' 'try' exprs+=Form* (catchClauses+=CatchClause)* finallyClause=FinallyClause? ')';
	
CatchClause:
	'(' 'catch' className=Name name=Name exprs+=Form* ')';
	
FinallyClause:
	{ FinallyClause }
	'(' 'finally' exprs+=Form* ')';
	
Unquote:
	'~' form=Form;
	
UnquoteSplicing:
	'~@' form=Form;
	
Var:
	('(' 'var' symbol=[SymbolDef|Name] ')') |
	('#\'' symbol=[SymbolDef|Name]);

// Bindings
	
Binding:
	SimpleBinding |
	VectorBinding |
	MapBinding;

NameBinding:
	varArg?='&'? name=Name;
			
SimpleBinding:
	ReaderMeta? bindings+=NameBinding;
	
VectorBinding:
	{ VectorBinding }
	'[' bindings+=Binding* ']';
	
MapBinding:
	{ MapBinding }
	'{' bindings+=KeyBinding* '}';

KeyBinding:
	binding+=Binding key += KEYWORD; 

// fn 
	
Body:
	lambdas+=Lambda | 
	('(' lambdas+=Lambda ')')+;
	
Lambda:
	{ Lambda }
	'[' bindings+=Binding* ']' exprs+=Form*;

// Sequences
	
Seq:
	List|
	Vector|
	Map|
	Set;
	
List:
	{ List }
	'(' elements+=Form* ')';

Vector:
	{ Vector }
	'[' elements+=Form* ']';
		
Map:
	{ Map }
	'{' (keys+=Form elements+=Form)* '}';
	
Set:
	{ Set }
	'#{' elements+=Form* '}';

// data type rules
	
QualifiedName:
	ID ('.' ID)* ('/' Name)?;
	
Name:
	ID|
	'catch'|
	'def'|'defn'|'defmacro'|'deref'|'do'|
	'fn'|'finally'|
	'if'|
	'let'|'loop'|
	'meta'|'monitor-enter'|'monitor-exit'|
	'ns'|'new'|
	'quote'|
	'throw'|'try'|
	'recur'|
	'var';
	
// Terminals
	
terminal KEYWORD:
	':' ID;
	
terminal ID: 
	(SYMBOL_START (SYMBOL_START|'0'..'9')*)|
	('&' SYMBOL_START (SYMBOL_START|'0'..'9')*)|
	'/';
		
terminal SYMBOL_START:
	'a'..'z'|'A'..'Z'|'_'|'+'|'-'|'*'|'!'|'?';
		
terminal INT 
returns ecore::EInt: 
	('0'..'9')+;
	
terminal STRING	: 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
	
terminal WSS: 
	(' '|'\t'|'\r'|'\n')+;
	
terminal SL_COMMENT: 
	';' !('\n'|'\r')* ('\r'? '\n')?;
	