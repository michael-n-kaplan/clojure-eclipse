grammar org.maschinenstuermer.clojure.Clojure

generate clojure "http://www.maschinenstuermer.org/clojure/Clojure"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

// file structure

File hidden(WSS,SL_COMMENT):
	namespaces+=Namespace*|
	exprs+=Form*;
Form:
	SimpleForm|
	SymbolRef;
SymbolRef hidden():
	type=[types::JvmType|QualifiedName] ('/' member=[types::JvmFeature|Symbol])?;
SimpleForm:
	SimpleLiteral|
	ImportForm|
	Defs|
	SpecialForm|
	Seq|
	ReaderMacro;	
SimpleLiteral:
	value=(NUMBER|Keyword|Boolean|STRING|CHAR|'nil')|
	param=PARAM_NAME;

// reader macros

ReaderMacro:
	Deref|
	ReaderLambda|
	ReaderMeta|
	ReaderQuote|
	ReaderVar|
	Regex|
	SyntaxQuote|
	Unquote|
	UnquoteSplicing;	
	
Deref:
	'@' form=Form;
ReaderLambda returns Lambda:
	{ Lambda } '#(' exprs+=Form* ')';	
ReaderMeta:
	{ Meta } '#'?'^' data=Form; // # is required for clojure < 1.2
ReaderQuote:
	{ Quote } '\'' quoted=QuotedForm;	
ReaderVar:
	{ Var } ('#\'' symbol=Symbol);
Regex:
	'#' regex=STRING;
SyntaxQuote:
	'`' form=QuotedForm;
Unquote:
	'~' form=QuotedForm;
UnquoteSplicing:
	'~@' form=QuotedForm;
	
	QuotedForm returns Form:
		SimpleLiteral|
		QuotedSymbol|
		ReaderMacro| // might cause problems with ^!!
		QuotedSeq;
	QuotedSymbol:
		symbol=QualifiedName;
	QuotedSeq returns Seq:
		{ List } '(' values+=QuotedForm* ')'|
		{ Map }'{' (keys+=QuotedForm values+=QuotedForm)* '}'|
		{ Set } '#{' values+=QuotedForm* '}'|
		{ Vector } '[' values+=QuotedForm* ']';
		
// namespaces
	
Namespace:
	Ns|
	InNs;
	
Ns:
	'(' 'ns' meta=ReaderMeta? name=QualifiedName attributes=Map? 
		refs+=Reference* ')' exprs += Form*;
InNs:
	'(' 'in-ns' meta=ReaderMeta? name=QuotedQualifiedName ')' exprs += Form*;
	QuotedQualifiedName returns ecore::EString hidden():
		'\'' QualifiedName;
		
	Reference:
		{Reference} ('(' ':import' packages+=PackageImport+ ')'|
	 	'(' ':use' uses+=ModuleImport+ ')'|
	 	'(' ':require' requires+=ModuleImport+ ')'|
	 	'(' ':refer-clojure' (':exclude' '(' excludes+=Symbol+ ')')? ')');
		PackageImport:
			'(' package=QualifiedName classes+=Symbol* ')'|
			class=QualifiedName;
		ModuleImport:
			requires+=SymbolImport|
			libSpecs+=LibSpec|
			flags+=Keyword|
			prefixLists+=PrefixLib;
			SymbolImport:
				'(' lib=QualifiedName fns+=Symbol* ')'|
				lib=QualifiedName;	
			LibSpec:
				'[' lib=QualifiedName ':as' alias=Symbol ']';
			PrefixLib:
				'(' prefix=QualifiedName libSpecs+=LibSpec+ ')';
	
ImportForm:
	'(' 'import' ('\'' packages+=PackageImport )+ ')';
	
// special forms

SpecialForm:
	Def|
	Do|
	Dot|
//	FormWithMeta|
	Fn|
	If|
	Let|
	Loop|
	Meta|
	MonitorEnter|MonitorExit|
	New|
	Recur|
	Quote|
	Throw|
	Try|
	Var;
	
Def:
	'(' 'def' meta=ReaderMeta? name=Symbol init=Form? ')';
Do:
	{ Do } '(' 'do' exprs+=Form* ')';
Dot: // uses Symbol for name so that core.clj can be parsed
	'(' member=MemberSymbol (instance=SimpleForm|type=[types::JvmType|JavaType]) args+=Form* ')'|
	'(' '.' type=[types::JvmType|JavaType] (member=Symbol args+=Form*| '(' member=Symbol args+=Form* ')') ')'|
	'(' '.' instance=SimpleForm    (member=Symbol args+=Form*| '(' member=Symbol args+=Form* ')') ')';
	MemberSymbol returns ecore::EString hidden():
		'.' Symbol;
//FormWithMeta:
//	meta=ReaderMeta form=Form;
Fn:
	{ Fn }	('(' ('fn'|'fn*') meta=ReaderMeta? name=Symbol? body=Body ')');
	Body:
		lambdas+=Lambda | 
		('(' lambdas+=Lambda ')')+;
	Lambda:
		{ Lambda } '[' bindings+=Binding* ']' exprs+=Form*;	
If:
	'(' 'if' cond=Form then=Form else=Form? ')';
Let:
	{ Let }	'(' 'let' '['(bindings+=Binding inits+=Form)*']' exprs+=Form* ')';
Loop:
	{ Loop } '(' 'loop' '['(bindings+=Binding inits+=Form)*']' exprs+=Form* ')';
New:
	'(' 'new' type=[types::JvmType|JavaType] args+=Form* ')';
Meta:
	'(' 'meta' data=Form ')';
MonitorEnter:
	'(' 'monitor-enter' form=Form ')';
MonitorExit:
	'(' 'monitor-exit' form=Form ')';
Recur:
	{ Recur } '(' 'recur' exprs+=Form* ')';			
Quote:
	'(' 'quote' quoted=QuotedForm ')';
Throw:
	'(' 'throw' expr=Form ')';	
Try:
	{ Try }
	'(' 'try' exprs+=Form* (catchClauses+=CatchClause)* finallyClause=FinallyClause? ')';
	CatchClause:
		'(' 'catch' className=Symbol name=Symbol exprs+=Form* ')';
	FinallyClause:
		{ FinallyClause } '(' 'finally' exprs+=Form* ')';
Var:
	('(' 'var' symbol=NAME ')');
	
// bindings

Binding:
	MapBinding|
	SimpleBinding|
	VectorBinding;

MapBinding:
	{ MapBinding } '{' bindings+=KeyBinding* '}';
	KeyBinding:
		binding+=Binding key+=Keyword;
SimpleBinding:
	bindings+=NameBinding;
	NameBinding:
		meta=ReaderMeta? (keyWord=Keyword)? name=Symbol;
VectorBinding:
	{ VectorBinding } '[' bindings+=Binding* ']';

// seqs

Seq:
	Call|
	List|
	Map|
	Set|
	Vector;
	
Call:
	{ New } '(' type=[types::JvmType|NewJavaType] args+=Form* ')'|
	'(' target=QualifiedName args+=Form* ')';
List:
	{ List }
	'(' (values+=SimpleForm values+=Form*)? ')';
Map:
	{ Map } '{' (keys+=Form values+=Form)* '}'; 
Set:
	{ Set } '#{' values+=Form* '}';
Vector:
	{ Vector } '[' values+=Form* ']';
		
	
// scoping

SymbolDef:
	Def|
	Defs|
	Fn|
	NameBinding;

LexicalScope:
	Lambda|
	Let|
	Loop;

// further def forms

Defs:
	Defn|
	DefnPriv|
	Defmacro|
	Defstruct;
	
	Defn:
		'(' 'defn' meta=ReaderMeta? name=Symbol doc=STRING? attributes=Map? body=Body ')';
	DefnPriv:
		'(' 'defn-' meta=ReaderMeta? name=Symbol doc=STRING? attributes=Map? body=Body ')';
	Defmacro:
		'(' 'defmacro' meta=ReaderMeta? name=Symbol doc=STRING? attributes=Map? body=Body ')';
	Defstruct:
		'(' 'defstruct' meta=ReaderMeta? name=Symbol keys+=Keyword* ')';
 	
// data type rules

Boolean:
	'true'|
	'false';

JavaType returns ecore::EString hidden():
	QualifiedName;
NewJavaType returns ecore::EString hidden():
	QualifiedName '.'; 

QualifiedName:
	Symbol (('$'|'.') Symbol)*;
	
Symbol:
	NAME|
	'/'|
	'.'|'..'|
	'catch'|
	'def'|
	'defn'|'defn-'|
	'defmacro'|
	'defstruct'|
	'do'|
	'finally'|
	'fn'|'fn*'|
	'if'|
	'import'|
	'in-ns'|
	'let'|
	'loop'|
	'meta'|
	'M'|
	'monitor-enter'|'monitor-exit'|
	'new'|
	'nil'|
	'ns'|
	'r'|
	'recur'|
	'quote'|
	'throw'|
	'try'|
	'var';
				
Keyword:
	KEY_WORD|
	':as'|
	':exclude'|
	':import'|
	':require'|
	':refer-clojure'|
	':use';
	
// terminal rules
	
terminal NUMBER:
	SIGN? DIGIT+(('.' DIGIT*)|('r' DIGIT+))?'M'?;

terminal KEY_WORD:
	':'':'? NAME;
	
terminal PARAM_NAME:
	'%' DIGIT*;
	
terminal NAME:
	SIGN (SYMBOL_START (SYMBOL_START|DIGIT|SIGN)*)?|
	SYMBOL_START (SYMBOL_START|DIGIT|SIGN)*;
	
terminal STRING	: 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
		
terminal CHAR:
	'\\' !(' '|'\t'|'\r'|'\n'|'('|')'|'['|']'|'{'|'}')+;
	
terminal SIGN:
	('-'|'+');
	
terminal SYMBOL_START:
	'a'..'z'|'A'..'Z'|'_'|'*'|'!'|'?'|'='|'#'|'<'|'>'|'&';
	
terminal DIGIT:
	('0'..'9');
		
terminal WSS: 
	(' '|'\t'|'\r'|'\n'|',')+;
	
terminal SL_COMMENT: 
	';' !('\n'|'\r')* ('\r'? '\n')?;

