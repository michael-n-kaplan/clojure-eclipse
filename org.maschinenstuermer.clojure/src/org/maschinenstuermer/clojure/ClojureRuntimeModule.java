/*
 * generated by Xtext
 */
package org.maschinenstuermer.clojure;

import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.maschinenstuermer.clojure.naming.ClojureQualifiedNameProvider;
import org.maschinenstuermer.clojure.scoping.ClojureGlobalScopeProvider;
import org.maschinenstuermer.clojure.scoping.ClojureImportedNamespaceAwareLocalScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class ClojureRuntimeModule extends org.maschinenstuermer.clojure.AbstractClojureRuntimeModule {
	
	public void configureIScopeProviderDelegate(com.google.inject.Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class).
			annotatedWith(com.google.inject.name.Names.named("org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.delegate")).
			to(ClojureImportedNamespaceAwareLocalScopeProvider.class);
	}
	
	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return ClojureQualifiedNameProvider.class;
	}
	
	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return ClojureGlobalScopeProvider.class;
	}
}
